name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build-cross-compile:
    name: Cross-compile for Termux
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        arch: [aarch64, arm, x86_64, i686]
        include:
          - arch: aarch64
            android_arch: aarch64
            target_triple: aarch64-linux-android
            api_level: 29
          - arch: arm
            android_arch: arm
            target_triple: armv7a-linux-androideabi
            api_level: 29
          - arch: x86_64
            android_arch: x86_64
            target_triple: x86_64-linux-android
            api_level: 29
          - arch: i686
            android_arch: x86
            target_triple: i686-linux-android
            api_level: 29
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Set up Android NDK
      id: setup-ndk
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r26b
        
    - name: Build for ${{ matrix.arch }}
      env:
        ANDROID_NDK: ${{ steps.setup-ndk.outputs.ndk-path }}
        ARCH: ${{ matrix.arch }}
        ANDROID_ARCH: ${{ matrix.android_arch }}
        TARGET_TRIPLE: ${{ matrix.target_triple }}
        API_LEVEL: ${{ matrix.api_level }}
      run: |
        set -e
        
        # Set up NDK toolchain
        export TOOLCHAIN=${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64
        export CC=${TOOLCHAIN}/bin/${TARGET_TRIPLE}${API_LEVEL}-clang
        export CXX=${TOOLCHAIN}/bin/${TARGET_TRIPLE}${API_LEVEL}-clang++
        export AR=${TOOLCHAIN}/bin/llvm-ar
        export STRIP=${TOOLCHAIN}/bin/llvm-strip
        
        # Verify toolchain
        echo "🔧 Using toolchain:"
        echo "CC: $CC"
        $CC --version
        
        # Create output directory
        mkdir -p dist/${ARCH}
        
        echo "🚀 Building for ${ARCH}..."
        
        # Build stub implementation
        echo "Building stub implementation..."
        $CC -shared -fPIC -O2 -DNDEBUG \
          -Iinclude \
          -I${JAVA_HOME}/include \
          -I${JAVA_HOME}/include/linux \
          -o dist/${ARCH}/libfilewatcher_jni_stub.so \
          src/stub/stub_filewatcher.c \
          src/common/jni_helpers.c
          
        # Build real implementation
        echo "Building real implementation..."
        $CC -shared -fPIC -O2 -DNDEBUG \
          -Iinclude \
          -I${JAVA_HOME}/include \
          -I${JAVA_HOME}/include/linux \
          -o dist/${ARCH}/libfilewatcher_jni.so \
          src/real/real_filewatcher.c \
          src/common/jni_helpers.c
          
        # Strip symbols for smaller size
        $STRIP dist/${ARCH}/*.so
        
        # Verify builds
        echo "✅ Built libraries:"
        file dist/${ARCH}/*.so
        ls -lh dist/${ARCH}/
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: termux-filewatcher-${{ matrix.arch }}
        path: dist/${{ matrix.arch }}/
        retention-days: 7

  create-release:
    name: Create GitHub Release
    needs: build-cross-compile
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      RELEASE_VERSION: ${{ github.event.inputs.version || github.ref_name }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts/
        
    - name: Prepare release artifacts
      run: |
        set -e
        
        echo "📦 Preparing individual architecture artifacts..."
        
        # Create architecture-specific archives
        for arch in aarch64 arm x86_64 i686; do
          if [ -d "release-artifacts/termux-filewatcher-${arch}" ]; then
            echo "✅ Creating ${arch} archive..."
            tar -czf "libfilewatcher-${arch}-${RELEASE_VERSION}.tar.gz" \
              -C "release-artifacts/termux-filewatcher-${arch}" .
          fi
        done
        
        echo "✅ Architecture-specific archives created:"
        ls -lh libfilewatcher-*.tar.gz
        
    - name: Generate changelog
      id: changelog
      run: |
        set -e
        
        echo "📝 Generating changelog..."
        
        # Get commits since last release/tag
        if git describe --tags --abbrev=0 >/dev/null 2>&1; then
          LAST_TAG=$(git describe --tags --abbrev=0)
          echo "Last tag: $LAST_TAG"
          COMMITS=$(git log --oneline ${LAST_TAG}..HEAD)
        else
          echo "No previous tags found, using all commits"
          COMMITS=$(git log --oneline)
        fi
        
        # Generate changelog
        CHANGELOG="## Changes\n\n"
        
        if [ -n "$COMMITS" ]; then
          echo "$COMMITS" | while read -r commit; do
            CHANGELOG="${CHANGELOG}* ${commit}\n"
          done
        else
          CHANGELOG="${CHANGELOG}* Initial release\n"
        fi
        
        CHANGELOG="${CHANGELOG}\n## Architecture Support\n\n"
        CHANGELOG="${CHANGELOG}* **AArch64** - Primary Termux architecture (recommended)\n"
        CHANGELOG="${CHANGELOG}* **ARM** - 32-bit ARM devices\n" 
        CHANGELOG="${CHANGELOG}* **x86_64** - 64-bit x86 (limited Termux support)\n"
        CHANGELOG="${CHANGELOG}* **i686** - 32-bit x86 (limited Termux support)\n"
        
        CHANGELOG="${CHANGELOG}\n## Installation\n\n"
        CHANGELOG="${CHANGELOG}Download the appropriate archive for your architecture:\n\n"
        CHANGELOG="${CHANGELOG}### AArch64 (Recommended for most Termux users)\n"
        CHANGELOG="${CHANGELOG}\`\`\`bash\n"
        CHANGELOG="${CHANGELOG}wget https://github.com/yamsergey/termux-filewatcher/releases/download/${RELEASE_VERSION}/libfilewatcher-aarch64-${RELEASE_VERSION}.tar.gz\n"
        CHANGELOG="${CHANGELOG}tar -xzf libfilewatcher-aarch64-${RELEASE_VERSION}.tar.gz\n"
        CHANGELOG="${CHANGELOG}cp libfilewatcher_jni.so /path/to/kotlin-lsp/native/Linux-AArch64/\n"
        CHANGELOG="${CHANGELOG}\`\`\`\n\n"
        CHANGELOG="${CHANGELOG}### Other Architectures\n"
        CHANGELOG="${CHANGELOG}Replace \`aarch64\` with your architecture: \`arm\`, \`x86_64\`, or \`i686\`\n"
        
        # Save changelog (escape newlines for GitHub Actions)
        echo -e "$CHANGELOG" > CHANGELOG.md
        
        # Set output for GitHub Actions
        CHANGELOG_ESCAPED=$(echo -e "$CHANGELOG" | sed ':a;N;$!ba;s/\n/\\n/g')
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo -e "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_VERSION }}
        name: "Termux FileWatcher ${{ env.RELEASE_VERSION }}"
        body: ${{ steps.changelog.outputs.changelog }}
        files: |
          libfilewatcher-*.tar.gz
        draft: false
        prerelease: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update documentation
      run: |
        echo "📚 Release ${{ env.RELEASE_VERSION }} created successfully!"
        echo ""
        echo "🔗 Release URL:"
        echo "https://github.com/yamsergey/termux-filewatcher/releases/tag/${{ env.RELEASE_VERSION }}"
        echo ""
        echo "📦 Quick install (AArch64):"
        echo "wget https://github.com/yamsergey/termux-filewatcher/releases/download/${{ env.RELEASE_VERSION }}/libfilewatcher-aarch64-${{ env.RELEASE_VERSION }}.tar.gz && tar -xzf libfilewatcher-aarch64-${{ env.RELEASE_VERSION }}.tar.gz"

  notify:
    name: Notify Success
    needs: create-release
    runs-on: ubuntu-latest
    if: success()
    env:
      RELEASE_VERSION: ${{ github.event.inputs.version || github.ref_name }}
    
    steps:
    - name: Summary
      run: |
        echo "## 🎉 Release ${{ env.RELEASE_VERSION }} Published Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Cross-compiled for:" >> $GITHUB_STEP_SUMMARY
        echo "- **AArch64** (Primary Termux architecture)" >> $GITHUB_STEP_SUMMARY
        echo "- **ARM** (32-bit ARM devices)" >> $GITHUB_STEP_SUMMARY
        echo "- **x86_64** (64-bit x86)" >> $GITHUB_STEP_SUMMARY
        echo "- **i686** (32-bit x86)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Installation (AArch64):" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "wget https://github.com/yamsergey/termux-filewatcher/releases/download/${{ env.RELEASE_VERSION }}/libfilewatcher-aarch64-${{ env.RELEASE_VERSION }}.tar.gz" >> $GITHUB_STEP_SUMMARY
        echo "tar -xzf libfilewatcher-aarch64-${{ env.RELEASE_VERSION }}.tar.gz" >> $GITHUB_STEP_SUMMARY
        echo "cp libfilewatcher_jni.so /path/to/kotlin-lsp/native/Linux-AArch64/" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Other architectures:** Replace \`aarch64\` with \`arm\`, \`x86_64\`, or \`i686\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Links:" >> $GITHUB_STEP_SUMMARY
        echo "- [📥 Download Release](https://github.com/yamsergey/termux-filewatcher/releases/tag/${{ env.RELEASE_VERSION }})" >> $GITHUB_STEP_SUMMARY
        echo "- [📚 Documentation](https://github.com/yamsergey/termux-filewatcher#readme)" >> $GITHUB_STEP_SUMMARY
        echo "- [🐛 Report Issues](https://github.com/yamsergey/termux-filewatcher/issues)" >> $GITHUB_STEP_SUMMARY